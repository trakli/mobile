name: Check, Test and Build

on:
  push:
    branches:
      - main
  pull_request:

env:
  FLUTTER_CHANNEL: "stable"
  FLUTTER_VERSION: "3.32.8"
  RUBY_VERSION: "3.2.2"

jobs:
  analyze:
    name: Analyze code (SAST)
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: ${{ env.FLUTTER_CHANNEL }}
          cache: true
      - name: Generate code
        run: flutter pub run build_runner build --delete-conflicting-outputs
      - name: Analyze code
        run: flutter analyze

  test:
    name: Run tests
    runs-on: ubuntu-latest
    needs: analyze
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: ${{ env.FLUTTER_CHANNEL }}
          cache: true
      - name: Run tests
        run: flutter test

  build-android:
    name: Build APK
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: ${{ env.FLUTTER_CHANNEL }}
          cache: true

      - name: Create key.jks
        run: |
          echo "${{ secrets.ANDROID_KEYSTORE_FILE_BASE64 }}" | base64 --decode > android/key.jks

      - name: Create key.properties
        run: |
          cat <<EOF > android/key.properties
          storePassword=${{ secrets.ANDROID_KEYSTORE_PASSWORD }}
          keyPassword=${{ secrets.ANDROID_KEYSTORE_PASSWORD }}
          keyAlias=release
          storeFile=../key.jks
          EOF
        env:
          ANDROID_KEYSTORE_PASSWORD: ${{ secrets.ANDROID_KEYSTORE_PASSWORD }}

      - name: Build APK
        run: flutter build apk

      - name: Upload APK
        uses: actions/upload-artifact@v4
        with:
          name: apk
          path: build/app/outputs/flutter-apk/

  distribute:
    name: Upload artifact to Firebase App Distribution
    runs-on: ubuntu-latest
    needs: build-android
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Download app APK
        uses: actions/download-artifact@v4
        with:
          name: apk
      - name: Upload artifact to Firebase App Distribution
        id: uploadArtifact
        env:
          INPUT_APPID: ${{secrets.FIREBASE_APP_ID}}
          INPUT_SERVICECREDENTIALSFILECONTENT: ${{ secrets.CREDENTIAL_FILE_CONTENT }}
          GOOGLE_APPLICATION_CREDENTIALS: service_credentials_content.json
          INPUT_GROUPS: testers
          INPUT_FILE: app-release.apk
        run: |
          cat <<< "${INPUT_SERVICECREDENTIALSFILECONTENT}" > service_credentials_content.json
          sudo npm install -g firebase-tools
          firebase  appdistribution:distribute  "$INPUT_FILE"  --app "$INPUT_APPID" --groups "$INPUT_GROUPS"  --testers "$INPUT_TESTERS"  --release-notes "$(git log -1 --pretty=short)"
  # deploy-firebase:
  #   name: Distribute existing APK to Firebase App Distribution
  #   runs-on: ubuntu-latest
  #   needs: build-android
  #   # if: github.ref == 'refs/heads/main'
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v4

  #     - name: Set up Ruby
  #       uses: ruby/setup-ruby@v1
  #       with:
  #         ruby-version: ${{ env.RUBY_VERSION }}
  #         bundler-cache: true
  #         working-directory: "android"

  #     - name: Set up Flutter
  #       uses: subosito/flutter-action@v2
  #       with:
  #         flutter-version: ${{ env.FLUTTER_VERSION }}
  #         channel: ${{ env.FLUTTER_CHANNEL }}
  #         cache: true

  #     - name: Create google_service_account.json
  #       run: |
  #         echo "${{ secrets.GOOGLE_SERVICES_ACCOUNT_BASE64 }}" | base64 --decode > google_service_account.json

  #     - name: Create firebase google_service_account.json
  #       env:
  #         CREDENTIAL_FILE_CONTENT: ${{ secrets.CREDENTIAL_FILE_CONTENT }}
  #       run: |
  #         cat <<< "$CREDENTIAL_FILE_CONTENT" > service_credentials_content.json

  #     - name: Create key.jks
  #       run: |
  #         echo "${{ secrets.ANDROID_KEYSTORE_FILE_BASE64 }}" | base64 --decode > android/key.jks

  #     - name: Create key.properties
  #       run: |
  #         cat <<EOF > android/key.properties
  #         storePassword=${{ secrets.ANDROID_KEYSTORE_PASSWORD }}
  #         keyPassword=${{ secrets.ANDROID_KEYSTORE_PASSWORD }}
  #         keyAlias=release
  #         storeFile=../key.jks
  #         EOF
  #       env:
  #         ANDROID_KEYSTORE_PASSWORD: ${{ secrets.ANDROID_KEYSTORE_PASSWORD }}

  #     - name: Deploy existing APK to Firebase
  #       uses: maierj/fastlane-action@v3.1.0
  #       with:
  #         lane: "distribute_existing_apk"
  #       env:
  #         APP_PACKAGE_NAME: ${{ vars.APP_PACKAGE_NAME }}
  #         FIREBASE_APP_ID: ${{ vars.FIREBASE_APP_ID }}
  #         APK_PATH: ${{ vars.APK_PATH }}

  # - name: Deploy to Firebase
  #   uses: maierj/fastlane-action@v3.1.0
  #   with:
  #     lane: "release_play_store_using_firebase"
  #     subdirectory: android
  #   env:
  #     APP_PACKAGE_NAME: ${{ vars.APP_PACKAGE_NAME }}
  #     FIREBASE_APP_ID: ${{ vars.FIREBASE_APP_ID }}
